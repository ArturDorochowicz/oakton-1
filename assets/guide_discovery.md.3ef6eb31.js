import{_ as n,c as s,o as a,a as t}from"./app.012e36bd.js";const y='{"title":"Command Assembly Discovery","description":"","frontmatter":{},"relativePath":"guide/discovery.md","lastUpdated":1655919011640}',o={},p=t(`<h1 id="command-assembly-discovery" tabindex="-1">Command Assembly Discovery <a class="header-anchor" href="#command-assembly-discovery" aria-hidden="true">#</a></h1><p>This feature probably won&#39;t be commonly used, but there is a mechanism to automatically find and load Oakton commands from other assemblies through file scanning.</p><p>The first step is to mark any assembly containing Oakton commands you want discovered and loaded through this mechanism with this attribute:</p><p><a id="snippet-sample_using_oaktoncommandassemblyattribute"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span><span class="token class-name">Oakton<span class="token punctuation">.</span>OaktonCommandAssembly</span></span><span class="token punctuation">]</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/AspNetCoreExtensionCommands/BuildCommand.cs#L4-L6" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using_oaktoncommandassemblyattribute" title="Start of snippet">anchor</a></sup></p><p>Next, when you build a <code>CommandFactory</code>, you need to explicitly opt into the auto-discovery of commands by using the <code>RegisterCommandsFromExtensionAssemblies()</code> option as shown below in the Oakton.AspNetCore code:</p><p><a id="snippet-sample_using_extension_assemblies"></a></p><div class="language-cs"><pre><code><span class="token keyword">return</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span>factory <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    factory<span class="token punctuation">.</span><span class="token function">RegisterCommands</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RunCommand</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationAssembly <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">RegisterCommands</span><span class="token punctuation">(</span>applicationAssembly<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This method will direct the CommandFactory to go look for extension</span>
    <span class="token comment">// assemblies with Oakton commands</span>
    factory<span class="token punctuation">.</span><span class="token function">RegisterCommandsFromExtensionAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    factory<span class="token punctuation">.</span>ConfigureRun <span class="token operator">=</span> cmd <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>Input <span class="token keyword">is</span> <span class="token class-name">IHostBuilderInput</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            factory<span class="token punctuation">.</span><span class="token function">ApplyExtensions</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token punctuation">.</span>HostBuilder <span class="token operator">=</span> source<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Oakton/CommandLineHostingExtensions.cs#L117-L136" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using_extension_assemblies" title="Start of snippet">anchor</a></sup></p>`,10),e=[p];function c(i,u,l,r,m,k){return a(),s("div",null,e)}var h=n(o,[["render",c]]);export{y as __pageData,h as default};
