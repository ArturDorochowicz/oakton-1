import{_ as s,c as a,o as e,a as n}from"./app.3751b049.js";const m=JSON.parse('{"title":"\\"Opts\\" Files","description":"","frontmatter":{},"headers":[],"relativePath":"guide/opts.md"}'),o={name:"guide/opts.md"},t=n(`<h1 id="opts-files" tabindex="-1">&quot;Opts&quot; Files <a class="header-anchor" href="#opts-files" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">warning</p><p>This feature is all new in Oakton and was inspired by Javascript tools like Mocha that use &quot;opts&quot; files to make their tools much easier to use at the command line</p></div><p>As a contrived example (that probably violates all kind of security best practices), let&#39;s say that your console application exposes several commands, but all of the commands may need an optional user name and password flag. You might start with a base class for your command inputs like this:</p><p><a id="snippet-sample_securedinput"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SecuredInput</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Password</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/OptionsSamples.cs#L20-L26" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_securedinput" title="Start of snippet">anchor</a></sup></p><p>To make the tool easier to use, we can take advantage of the &quot;opts&quot; file option by making Oakton look for the presence of an optional text file in the same directory as the command execution with a certain name to pick up default command usages.</p><p>We can set that up by declaring the name of the opts file like this:</p><p><a id="snippet-sample_configuring_opts_file"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">executor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> CommandExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// configure the command discovery</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">executor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OptionsFile </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mytool.opts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/OptionsSamples.cs#L9-L16" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_configuring_opts_file" title="Start of snippet">anchor</a></sup></p><p>Now, we could have add a file named <code>mytool.opts</code> to the directory where we run the command with this sample content:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">-u MyUserName</span></span>
<span class="line"><span style="color:#A6ACCD;">-p ~~HeMan2345</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now, when we run the command line <code>mytool somecommand</code> and that opts file is found in the current directory, Oakton appends the data of each line in that file so that the executed command is really <code>mytool somecommand -u MyUserName -p ~~HeMan2345</code>.</p><p>A couple other things to note:</p><ul><li>The presence of the named opts file is not mandatory</li><li>You can express arguments (maybe not super useful) or more likely any number of flag values</li><li>The opts file can be one or more lines if that aids readability</li></ul>`,16),p=[t];function l(c,r,i,y,d,u){return e(),a("div",null,p)}const D=s(o,[["render",l]]);export{m as __pageData,D as default};
