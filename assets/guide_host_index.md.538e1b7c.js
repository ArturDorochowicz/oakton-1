import{_ as s,c as a,o as n,a as o}from"./app.86ab06de.js";const C=JSON.parse('{"title":"Integration with IHost","description":"","frontmatter":{},"headers":[{"level":2,"title":".Net 6 Console Integration","slug":"net-6-console-integration","link":"#net-6-console-integration","children":[]},{"level":2,"title":"\\"Old School Program.Main()\\"","slug":"old-school-program-main","link":"#old-school-program-main","children":[]},{"level":2,"title":"Combining Serilog with Oakton","slug":"combining-serilog-with-oakton","link":"#combining-serilog-with-oakton","children":[]}],"relativePath":"guide/host/index.md"}'),e={name:"guide/host/index.md"},l=o(`<h1 id="integration-with-ihost" tabindex="-1">Integration with IHost <a class="header-anchor" href="#integration-with-ihost" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">warning</p><p>The functionality to integrate Oakton into .Net Core projects in <em>Oakton.AspNetCore</em> was combined into the main Oakton library for V3.0.</p></div><p>Oakton works well with the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0" target="_blank" rel="noreferrer">generic HostBuilder</a> in .Net Core and .Net 5 to extend the command line support of your applications.</p><ul><li><a href="/oakton/guide/host/run.html">An improved, default run command</a></li><li><a href="/oakton/guide/host/environment.html">A new command for environment check support</a></li><li><a href="/oakton/guide/host/extensions.html">Ability to add your own commands running in the context of your application</a></li><li><a href="/oakton/guide/host/describe.html">Extensible diagnostic data about your application</a></li></ul><p>To enable the extended command line options in your .Net application bootstrapped by <code>IHostBuilder</code>, first install the <code>Oakton</code> nuget to your project. Then modify the <code>Program.Main()</code> method generated by the typical .Net project templates as shown in some of the examples below:</p><h2 id="net-6-console-integration" tabindex="-1">.Net 6 Console Integration <a class="header-anchor" href="#net-6-console-integration" aria-hidden="true">#</a></h2><p>In .Net 6, you have the option to allow .Net to magically create a <code>Program.Main()</code> entry point over the code in the <code>Program</code> file. Oakton integration with <code>IHost</code> works every so slightly differently than the .Net 5 and before versions, but you can see an example below:</p><p><a id="snippet-sample_bootstrapping_minimal_api"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> Oakton</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> WebApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This isn&#39;t required, but it &quot;helps&quot; Oakton to enable</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// some additional diagnostics for the stateful resource </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// model</span></span>
<span class="line"><span style="color:#A6ACCD;">builder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Host</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ApplyOaktonExtensions</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MapGet</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Note the usage of await to force the implied</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Program.Main() method to be asynchronous</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RunOaktonCommands</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MinimalApi/Program.cs#L1-L19" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_bootstrapping_minimal_api" title="Start of snippet">anchor</a></sup></p><p>Just note that the <code>return await app.RunOaktonCommands(args);</code> line at the bottom is important because:</p><ol><li>Using <code>return</code> here tells .Net to make the <code>Program.Main()</code> return an exit code that the OS itself needs in order to understand if an execution was successful or not -- and one of the common usages of Oakton is to create validation commands that require this.</li><li>Using <code>await</code> here tells .Net to make <code>Program.Main()</code> return <code>Task&lt;int&gt;</code> and execute asynchronously instead of Oakton having to do evil <code>.GetAwaiter().GetResult()</code> calls behind the scenes.</li><li><code>RunOaktonCommands()</code> makes the .Net program use Oakton as the command line executor to begin with</li></ol><h2 id="old-school-program-main" tabindex="-1">&quot;Old School Program.Main()&quot; <a class="header-anchor" href="#old-school-program-main" aria-hidden="true">#</a></h2><p>Oakton usage for &quot;old school&quot; &lt; .Net 6 applications is very similar:</p><p><a id="snippet-sample_using_run_oakton_commands_3"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Program</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&lt;int&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Main</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateHostBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// This extension method replaces the calls to</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// IWebHost.Build() and Start()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RunOaktonCommands</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IHostBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateHostBuilder</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        Host</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateDefaultBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ConfigureWebHostDefaults</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseStartup</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Startup</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MvcApp/Program.cs#L36-L53" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using_run_oakton_commands_3" title="Start of snippet">anchor</a></sup></p><p>or with <code>IWebHostBuilder</code>:</p><p><a id="snippet-sample_using_run_oakton_commands"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Program</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&lt;int&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Main</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateWebHostBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// This extension method replaces the calls to</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// IWebHost.Build() and Start()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RunOaktonCommands</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IWebHostBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateWebHostBuilder</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        WebHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateDefaultBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseStartup</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Startup</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MvcApp/Program.cs#L16-L33" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using_run_oakton_commands" title="Start of snippet">anchor</a></sup></p><p>There are just a couple things to note:</p><ol><li>The return value of the <code>Program.Main()</code> method now needs to be <code>Task&lt;int&gt;</code> rather than <code>void</code>. This is done so that Oakton can return either successful or failure exit codes for usage in diagnostic commands you may want to stop automated builds upon failures.</li><li>You will use the <code>RunOaktonCommands()</code> method to accept the command line arguments and invoke your system rather than manually building and/or starting the <code>IWebHost</code> yourself</li></ol><h2 id="combining-serilog-with-oakton" tabindex="-1">Combining Serilog with Oakton <a class="header-anchor" href="#combining-serilog-with-oakton" aria-hidden="true">#</a></h2><p>If you&#39;re having any issues with Serilog logging while using Oakton, please see this <a href="https://stackoverflow.com/questions/55422528/logging-with-serilog-net-core-not-outputting" target="_blank" rel="noreferrer">StackOverflow issue</a>.</p>`,25),t=[l];function p(r,c,i,y,D,F){return n(),a("div",null,t)}const A=s(e,[["render",p]]);export{C as __pageData,A as default};
