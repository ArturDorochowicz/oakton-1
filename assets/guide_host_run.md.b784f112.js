import{_ as n,c as e,o as s,a}from"./app.38dc4654.js";const g=JSON.parse('{"title":"Improved \\"Run\\" Command","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overriding the Hosting Environment","slug":"overriding-the-hosting-environment","link":"#overriding-the-hosting-environment","children":[]},{"level":2,"title":"Overriding Configuration Items","slug":"overriding-configuration-items","link":"#overriding-configuration-items","children":[]},{"level":2,"title":"Overriding the Minimum Log Level","slug":"overriding-the-minimum-log-level","link":"#overriding-the-minimum-log-level","children":[]},{"level":2,"title":"Running Environment Checks Before Starting the Application","slug":"running-environment-checks-before-starting-the-application","link":"#running-environment-checks-before-starting-the-application","children":[]}],"relativePath":"guide/host/run.md"}'),t={name:"guide/host/run.md"},o=a(`<h1 id="improved-run-command" tabindex="-1">Improved &quot;Run&quot; Command <a class="header-anchor" href="#improved-run-command" aria-hidden="true">#</a></h1><p>To run your application normally from a command prompt with all the default configuration <strong>from the project root directory</strong>, there&#39;s no real change from what you&#39;d do without <em>Oakton.AspNetCore</em>. The command is still just:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>If your command prompt is at the solution directory (my personal default), you can use all the available <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-run?tabs=netcore21" target="_blank" rel="noreferrer">dotnet run</a> options, and in this case tell the dotnet CLI to run a project in another directory like this example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run --project src/MvcApp/MvcApp.csproj</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>So far, no changes from what you have today, so let&#39;s dig into what&#39;s changed. First, at any time to see the list of available commands in your system, use either the command <code>dotnet run -- ?</code> or <code>dotnet run -- help</code> as shown below:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- ?</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Which gave this output on a sample MVC application with commands from an extension library:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Searching &#39;AspNetCoreExtensionCommands, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39; for commands</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  -----------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    Available commands:</span></span>
<span class="line"><span style="color:#A6ACCD;">  -----------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    check-env -&gt; Execute all environment checks against the application</span></span>
<span class="line"><span style="color:#A6ACCD;">          run -&gt; Runs the configured AspNetCore application</span></span>
<span class="line"><span style="color:#A6ACCD;">        smoke -&gt; Simply try to build a web host as a smoke test</span></span>
<span class="line"><span style="color:#A6ACCD;">  ------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">warning</p><p>When you&#39;re using the <code>dotnet run</code> command, the usage of the double dashes <em>--</em> separates command line arguments to the <code>dotnet run</code> command itself from the command arguments to your application. The <code>args</code> array passed into your application will be any arguments or flags to the right of the <em>--</em> separator.</p></div><p>The <em>run</em> command shown above is the default command for Oakton and what will be executed unless you explicitly choose another named command.</p><p>Looking farther into what the <em>run</em> command provides with:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- ? run</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>gives you this help text for the options on the <em>run</em> command:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> Usages for &#39;run&#39; (Runs the configured AspNetCore application)</span></span>
<span class="line"><span style="color:#A6ACCD;">  run [-c, --check] [-e, --environment &lt;environment&gt;] [-v, --verbose] [-l, --log-level &lt;logleve&gt;] [----config:&lt;prop&gt; &lt;value&gt;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  ---------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    Flags</span></span>
<span class="line"><span style="color:#A6ACCD;">  ---------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">                        [-c, --check] -&gt; Run the environment checks before starting the host</span></span>
<span class="line"><span style="color:#A6ACCD;">    [-e, --environment &lt;environment&gt;] -&gt; Use to override the ASP.Net Environment name</span></span>
<span class="line"><span style="color:#A6ACCD;">                      [-v, --verbose] -&gt; Write out much more information at startup and enables console logging</span></span>
<span class="line"><span style="color:#A6ACCD;">          [-l, --log-level &lt;logleve&gt;] -&gt; Override the log level</span></span>
<span class="line"><span style="color:#A6ACCD;">          [----config:&lt;prop&gt; &lt;value&gt;] -&gt; Overwrite individual configuration items</span></span>
<span class="line"><span style="color:#A6ACCD;">  ---------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="overriding-the-hosting-environment" tabindex="-1">Overriding the Hosting Environment <a class="header-anchor" href="#overriding-the-hosting-environment" aria-hidden="true">#</a></h2><p>To override the hosting environment that your ASP.Net Core application runs under, use the <em>environment</em> flag as shown below:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- --environment Testing</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>This would be the equivalent of running your application with this code (note the usage of <code>UseEnvironment(&quot;Testing&quot;)</code>):</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    public class Program</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        public static Task&lt;int&gt; Main(string[] args)</span></span>
<span class="line"><span style="color:#A6ACCD;">        {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return CreateWebHostBuilder(args)</span></span>
<span class="line"><span style="color:#A6ACCD;">                .RunOaktonCommands(args);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            WebHost.CreateDefaultBuilder(args)</span></span>
<span class="line"><span style="color:#A6ACCD;">                .UseStartup&lt;Startup&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">                // This is what the --environment flag does</span></span>
<span class="line"><span style="color:#A6ACCD;">                .UseEnvironment(&quot;Testing&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>See <a href="https://andrewlock.net/how-to-use-multiple-hosting-environments-on-the-same-machine-in-asp-net-core/" target="_blank" rel="noreferrer">Andrew Lock on how the hosting environment can be useful</a>.</p><h2 id="overriding-configuration-items" tabindex="-1">Overriding Configuration Items <a class="header-anchor" href="#overriding-configuration-items" aria-hidden="true">#</a></h2><p>Individual values in your system&#39;s <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2" target="_blank" rel="noreferrer">IConfiguration</a> can be overridden at the command line using the <em>--config</em> flag like so:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- --config:key1 value1 --config:key2 value2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The flag usage above would override the system configuration with the values <em>key1=value1</em> and <em>key2=value2</em>.</p><h2 id="overriding-the-minimum-log-level" tabindex="-1">Overriding the Minimum Log Level <a class="header-anchor" href="#overriding-the-minimum-log-level" aria-hidden="true">#</a></h2><p>You can override the minimum log level in the running application using any valid value of the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel?view=aspnetcore-2.2" target="_blank" rel="noreferrer">LogLevel</a> enumeration and the <em>--log-level</em> flag as shown below:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- --log-level Information</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>See <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2" target="_blank" rel="noreferrer">Logging in .NET Core and ASP.NET Core</a> for more information about ASP.Net Core logging.</p><h2 id="running-environment-checks-before-starting-the-application" tabindex="-1">Running Environment Checks Before Starting the Application <a class="header-anchor" href="#running-environment-checks-before-starting-the-application" aria-hidden="true">#</a></h2><p>You can also opt into running any configured <a href="/oakton/guide/host/environment.html">environment checks</a> before starting Kestrel. If any of the environment checks fail, the application startup will fail. The goal of this feature is to make deployments be self-diagnosing and fail fast at startup time if the system can detect problems in its configuration or with its dependencies.</p><p>To run the environment checks as part of the run command, just use the <em>--environment</em> flag like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- --environment</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,33),l=[o];function i(r,p,c,d,h,m){return s(),e("div",null,l)}const C=n(t,[["render",i]]);export{g as __pageData,C as default};
