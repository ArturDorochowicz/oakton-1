import{_ as n,c as s,o as a,a as t}from"./app.e640da3b.js";const g='{"title":"Argument Usages","description":"","frontmatter":{},"headers":[{"level":2,"title":"Argument Usages","slug":"argument-usages"},{"level":2,"title":"Specifying Command Names","slug":"specifying-command-names"},{"level":2,"title":"Asynchronous Commands","slug":"asynchronous-commands"}],"relativePath":"guide/commands.md","lastUpdated":1676461536625}',p={},o=t(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is perfectly legal to use the same input class across multiple commands</p></div><p>Oakton commands consist of two parts:</p><ol><li>A concrete input class that holds all the argument and flag data inputs</li><li>A concrete class that inherits from <code>OaktonCommand&lt;T&gt;</code> or <code>OaktonAsyncCommand&lt;T&gt;</code> where the &quot;T&quot; is the input class in the first bullet point</li></ol><p>Looking again at the <code>NameCommand</code> from the <a href="/guide/">getting started</a> topic:</p><p><a id="snippet-sample_namecommand"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Print somebody&#39;s name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OaktonCommand<span class="token punctuation">&lt;</span>NameInput<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">NameCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// The usage pattern definition here is completely</span>
        <span class="token comment">// optional</span>
        <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;Default Color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;Print name with specified color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">NameInput</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> text <span class="token operator">=</span> input<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>TitleFlag<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            text <span class="token operator">=</span> input<span class="token punctuation">.</span>TitleFlag <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        AnsiConsole<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>Color</span><span class="token punctuation">}</span></span><span class="token string">]</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">text</span><span class="token punctuation">}</span></span><span class="token string">[/]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Just telling the OS that the command</span>
        <span class="token comment">// finished up okay</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L33-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_namecommand" title="Start of snippet">anchor</a></sup></p><p>There&#39;s only a couple things to note about a command class:</p><ul><li>The only entry point is the <code>Execute()</code> method</li><li>The boolean return from the <code>Execute()</code> method simply denotes whether or not the command completed successfully. This will be important for any kind of console application that you&#39;ll want to use in automated builds to prevent false positive results</li><li>The <code>Usages</code> syntax in the constructor is explained in a section below</li><li>The <code>[Description]</code> attribute on the class is strictly for the purpose of providing help text and is not mandatory</li></ul><p>If you want to make use of <code>async/await</code>, you can inherit from <code>OaktonAsyncCommand&lt;T&gt;</code> instead. The only difference is signature of the <code>Execute()</code> method:</p><p><a id="snippet-sample_async_command"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoNameThingsCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OaktonAsyncCommand<span class="token punctuation">&lt;</span>NameInput<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">NameInput</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        AnsiConsole<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>Color</span><span class="token punctuation">}</span></span><span class="token string">]Starting...[/]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        AnsiConsole<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>Color</span><span class="token punctuation">}</span></span><span class="token string">]Done! Hello </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">[/]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L98-L110" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_async_command" title="Start of snippet">anchor</a></sup></p><h2 id="argument-usages" tabindex="-1">Argument Usages <a class="header-anchor" href="#argument-usages" aria-hidden="true">#</a></h2><p>As shown in the <code>NameCommand</code> in the section above, you can specify the valid combinations of arguments and the order in which they should follow in the command line usage by modifying the <code>Usages</code> property in the constructor function of a command:</p><p><a id="snippet-sample_specifying_usages"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token function">OtherNameCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// You can specify multiple usages</span>
    <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;describe what is different about this usage&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// Specify which arguments are part of this usage</span>
        <span class="token comment">// and in what order they should be expressed</span>
        <span class="token comment">// by the user</span>
        <span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Color<span class="token punctuation">)</span>

        <span class="token comment">// Optionally, you can provide a white list of valid</span>
        <span class="token comment">// flags in this usage</span>
        <span class="token punctuation">.</span><span class="token function">ValidFlags</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>TitleFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L65-L79" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_specifying_usages" title="Start of snippet">anchor</a></sup></p><p>If you do not explicitly specify usages, Oakton will assume that all arguments are mandatory and in the order in which they appear within the input class.</p><h2 id="specifying-command-names" tabindex="-1">Specifying Command Names <a class="header-anchor" href="#specifying-command-names" aria-hidden="true">#</a></h2><p>By default, Oakton determines the command name for a command class by taking the class name, removing the &quot;Command&quot; suffix, and then using the all lower case remainder of the string. For an example, a command class called <code>CleanCommand</code> would have the command name <em>clean</em>. To override that behavior, you can use the <code>Alias</code> property on Oakton&#39;s <code>[Description]</code> attribute as shown below:</p><p><a id="snippet-sample_command_alias"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Say my name differently&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;different-name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliasedCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OaktonCommand<span class="token punctuation">&lt;</span>NameInput<span class="token punctuation">&gt;</span></span></span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L87-L90" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_command_alias" title="Start of snippet">anchor</a></sup></p><h2 id="asynchronous-commands" tabindex="-1">Asynchronous Commands <a class="header-anchor" href="#asynchronous-commands" aria-hidden="true">#</a></h2><p>Oakton also supports the ability to write asynchronous commands that take advantage of the ability to use asynchronous <code>Program.Main()</code> method signatures in recent versions of .Net.</p><p>To write an asynchronous command, use the <code>OaktonAsyncCommand&lt;T&gt;</code> type as your base class for your command as shown below:</p><p><a id="snippet-sample_async_command_sample"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Say my name&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;say-async-name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncSayNameCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OaktonAsyncCommand<span class="token punctuation">&lt;</span>SayName<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">AsyncSayNameCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;Capture the users name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">SayName</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>FirstName</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>LastName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/CommandExecutorTester.cs#L161-L177" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_async_command_sample" title="Start of snippet">anchor</a></sup></p><p>Likewise, to execute asynchronously from <code>Program.Main()</code>, there are new overloads on <code>CommandExecutor</code> for async:</p><p><a id="snippet-sample_multiplecommands.program.main.async"></a></p><div class="language-cs"><pre><code><span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> executor <span class="token operator">=</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Find and apply all command classes discovered</span>
        <span class="token comment">// in this assembly</span>
        _<span class="token punctuation">.</span><span class="token function">RegisterCommands</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L25-L37" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_multiplecommands.program.main.async" title="Start of snippet">anchor</a></sup></p>`,34),e=[o];function c(l,u,i,r,k,m){return a(),s("div",null,e)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
