import{_ as s,c as a,o as e,a as n}from"./app.e640da3b.js";const h='{"title":"\\"Opts\\" Files","description":"","frontmatter":{},"relativePath":"guide/opts.md","lastUpdated":1676461536629}',t={},o=n(`<h1 id="opts-files" tabindex="-1">&quot;Opts&quot; Files <a class="header-anchor" href="#opts-files" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">warning</p><p>This feature is all new in Oakton and was inspired by Javascript tools like Mocha that use &quot;opts&quot; files to make their tools much easier to use at the command line</p></div><p>As a contrived example (that probably violates all kind of security best practices), let&#39;s say that your console application exposes several commands, but all of the commands may need an optional user name and password flag. You might start with a base class for your command inputs like this:</p><p><a id="snippet-sample_securedinput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuredInput</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/OptionsSamples.cs#L20-L26" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_securedinput" title="Start of snippet">anchor</a></sup></p><p>To make the tool easier to use, we can take advantage of the &quot;opts&quot; file option by making Oakton look for the presence of an optional text file in the same directory as the command execution with a certain name to pick up default command usages.</p><p>We can set that up by declaring the name of the opts file like this:</p><p><a id="snippet-sample_configuring_opts_file"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> executor <span class="token operator">=</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// configure the command discovery</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

executor<span class="token punctuation">.</span>OptionsFile <span class="token operator">=</span> <span class="token string">&quot;mytool.opts&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/OptionsSamples.cs#L9-L16" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_configuring_opts_file" title="Start of snippet">anchor</a></sup></p><p>Now, we could have add a file named <code>mytool.opts</code> to the directory where we run the command with this sample content:</p><div class="language-"><pre><code>-u MyUserName
-p ~~HeMan2345
</code></pre></div><p>Now, when we run the command line <code>mytool somecommand</code> and that opts file is found in the current directory, Oakton appends the data of each line in that file so that the executed command is really <code>mytool somecommand -u MyUserName -p ~~HeMan2345</code>.</p><p>A couple other things to note:</p><ul><li>The presence of the named opts file is not mandatory</li><li>You can express arguments (maybe not super useful) or more likely any number of flag values</li><li>The opts file can be one or more lines if that aids readability</li></ul>`,16),p=[o];function c(i,l,r,u,d,m){return e(),a("div",null,p)}var f=s(t,[["render",c]]);export{h as __pageData,f as default};
