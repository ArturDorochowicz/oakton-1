import{_ as n,c as s,o as a,a as t}from"./app.e640da3b.js";const y='{"title":"The \\"describe\\" command","description":"","frontmatter":{},"headers":[{"level":2,"title":"Extending describe","slug":"extending-describe"}],"relativePath":"guide/host/describe.md","lastUpdated":1676461536625}',e={},p=t(`<h1 id="the-describe-command" tabindex="-1">The &quot;describe&quot; command <a class="header-anchor" href="#the-describe-command" aria-hidden="true">#</a></h1><p>The new <code>describe</code> command that comes with Oakton V3.0+ can be used as a generic diagnostic capability to look into the configuration of your .Net application that&#39;s bootstrapped with <code>IHostBuilder</code>.</p><p>Out of the box, the <code>describe</code> command will simply preview some information about your main application assembly, its version, the application&#39;s <code>IHostEnvironment</code> settings, and the immediately reference assemblies (it&#39;s not a recursive query) with output like this:</p><div class="language-"><pre><code>\u2500\u2500 About EnvironmentCheckDemonstrator \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
          Entry Assembly: EnvironmentCheckDemonstrator
                 Version: 1.0.0.0
        Application Name: EnvironmentCheckDemonstrator
             Environment: Production
       Content Root Path: /Users/jeremydmiller/code/oakton/src/EnvironmentCheckDemonstrator
AppContext.BaseDirectory: /Users/jeremydmiller/code/oakton/src/EnvironmentCheckDemonstrator/bin/Debug/net5.0/


\u2500\u2500 Referenced Assemblies \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500
\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510
\u2502 Assembly Name                                         \u2502 Version \u2502
\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524
\u2502 System.Runtime                                        \u2502 5.0.0.0 \u2502
\u2502 Oakton                                                \u2502 3.0.0.0 \u2502
\u2502 Microsoft.Extensions.DependencyInjection.Abstractions \u2502 5.0.0.0 \u2502
\u2502 System.ComponentModel                                 \u2502 5.0.0.0 \u2502
\u2502 System.Console                                        \u2502 5.0.0.0 \u2502
\u2502 Microsoft.Extensions.Hosting                          \u2502 5.0.0.0 \u2502
\u2502 Microsoft.Extensions.Hosting.Abstractions             \u2502 5.0.0.0 \u2502
\u2502 Baseline                                              \u2502 2.1.1.0 \u2502
\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518

</code></pre></div><p>The command line flags are shown below:</p><div class="language-"><pre><code>                  [-f, --file &lt;file&gt;] -&gt; Optionally write the description to the given file location
                       [-s, --silent] -&gt; Do not write any output to the console
                [-t, --title &lt;title&gt;] -&gt; Filter the output to only a single described part
                         [-l, --list] -&gt; If set, the command only lists the known part titles
                  [-i, --interactive] -&gt; If set, interactively select which part(s) to preview
    [-e, --environment &lt;environment&gt;] -&gt; Use to override the ASP.Net Environment name
                      [-v, --verbose] -&gt; Write out much more information at startup and enables console logging
         [-l, --log-level &lt;loglevel&gt;] -&gt; Override the log level
          [----config:&lt;prop&gt; &lt;value&gt;] -&gt; Overwrite individual configuration items

</code></pre></div><p>As you can hopefull tell, the <code>describe</code> command can be used to preview the diagnostic information in the console and optionally write the descriptive text to a file like this, where <code>myapp.md</code> is the file name you want the output written to:</p><div class="language-"><pre><code>dotnet run -- describe --file myapp.md
</code></pre></div><p>If you have many described parts in your system, you can use the <code>-i</code> or <code>--interactive</code> flag to interactively select which parts you want to view or export to a file.</p><h2 id="extending-describe" tabindex="-1">Extending describe <a class="header-anchor" href="#extending-describe" aria-hidden="true">#</a></h2><p>The <code>describe</code> command can be extended by registering custom implemtations of the <code>IDescribedSystemPart</code> interface in your application container:</p><p><a id="snippet-sample_idescribedsystempart"></a></p><div class="language-cs"><pre><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">///     Base class for a &quot;described&quot; part of your application.</span>
<span class="token comment">///     Implementations of this type should be registered in your</span>
<span class="token comment">///     system&#39;s DI container to be exposed through the &quot;describe&quot;</span>
<span class="token comment">///     command</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDescribedSystemPart</span>
<span class="token punctuation">{</span>
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">///     A descriptive title to be shown in the rendered output</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">///     Write markdown formatted text to describe this system part</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token comment">/// &lt;param name=&quot;writer&quot;&gt;&lt;/param&gt;</span>
    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="token return-type class-name">Task</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name">TextWriter</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Oakton/Descriptions/IDescribedSystemPart.cs#L6-L29" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_idescribedsystempart" title="Start of snippet">anchor</a></sup></p><p>Or if you have a related group of parts, you can register custom implementations of the <code>IDescribedSystemPartFactory</code> as well:</p><p><a id="snippet-sample_idescribedsystempartfactory"></a></p><div class="language-cs"><pre><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">///     Register implementations of this service to help</span>
<span class="token comment">///     the describe command discover additional system parts</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDescribedSystemPartFactory</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">IDescribedSystemPart<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Parts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Oakton/Descriptions/IDescribedSystemPartFactory.cs#L3-L14" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_idescribedsystempartfactory" title="Start of snippet">anchor</a></sup></p><p>Oakton adds a couple extension methods on <code>IServiceCollection</code> to help you register custom describers:</p><p><a id="snippet-sample_extending_describe"></a></p><div class="language-cs"><pre><code><span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnvironmentCheck<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GoodEnvironmentCheck</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnvironmentCheck<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadEnvironmentCheck</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IStatefulResource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeResource</span><span class="token punctuation">(</span><span class="token string">&quot;Database&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Db &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IStatefulResource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeResource</span><span class="token punctuation">(</span><span class="token string">&quot;Bad&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Blows Up&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Failure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DivideByZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            services<span class="token punctuation">.</span><span class="token function">CheckEnvironment</span><span class="token punctuation">(</span><span class="token string">&quot;Inline, async check&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>services<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">Milliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;I failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            
            <span class="token comment">// This is an example of adding custom</span>
            <span class="token comment">// IDescriptionSystemPart types to your</span>
            <span class="token comment">// application that can participate in</span>
            <span class="token comment">// the describe output</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDescription</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Describer1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDescription</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Describer2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDescription</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Describer3<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RunOaktonCommands</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/EnvironmentCheckDemonstrator/Program.cs#L15-L55" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_extending_describe" title="Start of snippet">anchor</a></sup></p><p>For an example, here&#39;s the implementation for one of the built in described system parts:</p><p><a id="snippet-sample_aboutthisapppart"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AboutThisAppPart</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDescribedSystemPart</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHostEnvironment</span> _host<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AboutThisAppPart</span><span class="token punctuation">(</span><span class="token class-name">IHostEnvironment</span> host<span class="token punctuation">,</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _host <span class="token operator">=</span> host<span class="token punctuation">;</span>
        Title <span class="token operator">=</span> <span class="token string">&quot;About &quot;</span> <span class="token operator">+</span> Assembly<span class="token punctuation">.</span><span class="token function">GetEntryAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">??</span> <span class="token string">&quot;This Application&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name">TextWriter</span> writer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> entryAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetEntryAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;          Entry Assembly: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">entryAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;                 Version: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">entryAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Version</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;        Application Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_host<span class="token punctuation">.</span>ApplicationName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;             Environment: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_host<span class="token punctuation">.</span>EnvironmentName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;       Content Root Path: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_host<span class="token punctuation">.</span>ContentRootPath</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;AppContext.BaseDirectory: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">AppContext<span class="token punctuation">.</span>BaseDirectory</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Oakton/Descriptions/DescribeCommand.cs#L122-L150" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_aboutthisapppart" title="Start of snippet">anchor</a></sup></p><p>You can also opt into enhanced formatting in the console output using the <a href="https://spectresystems.github.io/spectre.console/" target="_blank" rel="noopener noreferrer">Spectre.Console</a> library if your part implements the <code>IWriteToConsole</code> interface like this built in part:</p><p><a id="snippet-sample_referencedassemblies"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferencedAssemblies</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDescribedSystemPart</span><span class="token punctuation">,</span> <span class="token class-name">IWriteToConsole</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Referenced Assemblies&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// If you&#39;re writing to a file, this method will be called to </span>
    <span class="token comment">// write out markdown formatted text</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name">TextWriter</span> writer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> referenced <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetEntryAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetReferencedAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> assemblyName <span class="token keyword">in</span> referenced<span class="token punctuation">)</span> writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;* &quot;</span> <span class="token operator">+</span> assemblyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If you&#39;re only writing to the console, you can implement the</span>
    <span class="token comment">// IWriteToConsole method and optionally use Spectre.Console for</span>
    <span class="token comment">// enhanced displays</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteToConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">AddColumn</span><span class="token punctuation">(</span><span class="token string">&quot;Assembly Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">AddColumn</span><span class="token punctuation">(</span><span class="token string">&quot;Version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> referenced <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetEntryAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetReferencedAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> assemblyName <span class="token keyword">in</span> referenced<span class="token punctuation">)</span> table<span class="token punctuation">.</span><span class="token function">AddRow</span><span class="token punctuation">(</span>assemblyName<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> assemblyName<span class="token punctuation">.</span>Version<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        AnsiConsole<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Oakton/Descriptions/DescribeCommand.cs#L152-L186" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_referencedassemblies" title="Start of snippet">anchor</a></sup></p>`,30),o=[p];function c(i,l,u,r,k,m){return a(),s("div",null,o)}var g=n(e,[["render",c]]);export{y as __pageData,g as default};
