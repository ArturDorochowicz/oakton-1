import{_ as s,c as n,o as a,a as l}from"./app.cb90d6e4.js";const A=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Your First Command","slug":"your-first-command","link":"#your-first-command","children":[]},{"level":2,"title":"How it Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"Multiple Commands in One Tool","slug":"multiple-commands-in-one-tool","link":"#multiple-commands-in-one-tool","children":[]}],"relativePath":"guide/getting_started.md"}'),o={name:"guide/getting_started.md"},p=l(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The power of Oakton really comes into play when it&#39;s combined with applications using the <code>HostBuilder</code> mechanism for bootstrapping .Net applications. See <a href="/oakton/guide/host/">Integration with IHost</a> for more information.</p></div><p>Oakton originated in the now defunct <a href="https://github.com/DarthFubuMVC/fubucore" target="_blank" rel="noreferrer">FubuCore</a> project in 2010 as a mechanism to allow our .Net development team of that time to build robust console line utilities with these attributes:</p><ul><li>Make it easy to embed and expose command help for user friendliness</li><li>Be consistent with Unix/Linux command line idioms from arguments and optional names -- i.e., make the command line usage feel like Git&#39;s command line syntax</li><li>Easily enable tools to expose multiple commands</li><li>Completely separate the command line parsing from the actual functionality of the console application for easier testing of the command line tools and cleaner code</li><li>Validate user input and helpfully tell them when it&#39;s invalid and what the correct usage should be</li></ul><h2 id="your-first-command" tabindex="-1">Your First Command <a class="header-anchor" href="#your-first-command" aria-hidden="true">#</a></h2><p>To get started, simply create a new dotnet console application and add the <code>Oakton</code> nuget dependency. For your first command, let&#39;s start simple with a command that will simply print out a specified name with an optional color and title. The logical first step is to just create the input class for your command that will establish the arguments and an optional flag:</p><p><a id="snippet-sample_NameInput"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NameInput</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The name to be printed to the console output</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The color of the text. Default is black</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ConsoleColor</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Color</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ConsoleColor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Black</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Optional title preceeding the name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TitleFlag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L19-L31" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_NameInput" title="Start of snippet">anchor</a></sup></p><p>You&#39;ll note that I&#39;ve added some <code>[Oakton.Description]</code> attributes strictly for the purpose of adding user help messages that we&#39;ll take a look at later. Now that we&#39;ve got that out of the way, let&#39;s create our first command:</p><p><a id="snippet-sample_NameCommand"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Print somebody&#39;s name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NameCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OaktonCommand</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">NameInput</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NameCommand</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The usage pattern definition here is completely</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// optional</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Usage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Default Color</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Arguments</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Usage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Print name with specified color</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Arguments</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Color</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">NameInput</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsNullOrEmpty</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TitleFlag</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TitleFlag </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        AnsiConsole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MarkupLine</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">$&quot;</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Color</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">[/]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Just telling the OS that the command</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// finished up okay</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L33-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_NameCommand" title="Start of snippet">anchor</a></sup></p><p>With that in place, let&#39;s wire it up to our applications <code>Program.Main()</code>:</p><p><a id="snippet-sample_Quickstart.Program1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Program</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Main</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// As long as this doesn&#39;t blow up, we&#39;re good to go</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> CommandExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ExecuteCommand</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">NameCommand</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L8-L17" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_Quickstart.Program1" title="Start of snippet">anchor</a></sup></p><p>Now, from the command line, I&#39;ll just try <code>dotnet run</code>, which will give us this (slightly elided) output complaining that we&#39;re missing a required argument or two:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Invalid usage</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">name - Print somebody&#39;s name</span></span>
<span class="line"><span style="color:#A6ACCD;">├── Default Color</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── dotnet run -- name &lt;name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">│       └── [-t, --title &lt;title&gt;]</span></span>
<span class="line"><span style="color:#A6ACCD;">└── Print name with specified color</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── dotnet run -- name &lt;name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        Black|DarkBlue|DarkGreen|DarkCyan|DarkRed|DarkMagenta|DarkYellow|Gray|DarkGray|Blue|Green|Cyan|Red|Magenta|Yello</span></span>
<span class="line"><span style="color:#A6ACCD;">        w|White</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── [-t, --title &lt;title&gt;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">                  Usage   Description</span></span>
<span class="line"><span style="color:#A6ACCD;">────────────────────────────────────────────────────────────────────────</span></span>
<span class="line"><span style="color:#A6ACCD;">                   name   The name to be printed to the console output</span></span>
<span class="line"><span style="color:#A6ACCD;">                  color   The color of the text. Default is black</span></span>
<span class="line"><span style="color:#A6ACCD;">  [-t, --title &lt;title&gt;]   Optional title preceeding the name</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Do note that we could get the same output without the angry &quot;Invalid Usage&quot; message by:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- help</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>or</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- ?</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now, to actually run the command, try:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dotnet run -- &quot;Alex Smith&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Which will simply print out <em>Alex Smith</em> to the console output. We had to wrap the text in quotations so that Oakton treated the full name with spaces as a single argument.</p><div class="tip custom-block"><p class="custom-block-title">warning</p><p>The &quot;--&quot; argument shown in the samples here is only a construct of using the &quot;dotnet run&quot; command to separate arguments that should apply to the dotnet tool on the left from arguments that should be passed into our application. If you run the compiled application itself, you will not need the &quot;--&quot; separator.</p></div><p>To print the name in blue, we can type <code>dotnet run -- &quot;Alex Smith&quot; Blue</code>. To add a title, we can use the signature <code>dotnet run -- &quot;Alex Smith&quot; --title Mr</code> or <code>dotnet run -- &quot;Alex Smith&quot; --t Mr</code> to get the output &quot;Mr Alex Smith.&quot;</p><h2 id="how-it-works" tabindex="-1">How it Works <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h2><p>Oakton is attempting to take the tokenized values in the command line input and apply the values to the matching fields or properties on the input class objects before passing that object into the proper command&#39;s <code>Execute()</code> method. Oakton also validates that the signature and flag usage matches the known command syntax.</p><h2 id="multiple-commands-in-one-tool" tabindex="-1">Multiple Commands in One Tool <a class="header-anchor" href="#multiple-commands-in-one-tool" aria-hidden="true">#</a></h2><p>Now, let&#39;s move on to building a tool with multiple commands. Let&#39;s say that we&#39;re trying to partially recreate the git command line with the <code>clean</code> and <code>checkout</code> commands:</p><p><a id="snippet-sample_git_commands"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Switch branches or restore working tree files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CheckoutCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OaktonAsyncCommand</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CheckoutInput</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&lt;bool&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">CheckoutInput</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> Task</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CompletedTask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Remove untracked files from the working tree</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CleanCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OaktonCommand</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CleanInput</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">CleanInput</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L41-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_git_commands" title="Start of snippet">anchor</a></sup></p><p>In the <code>Program.Main()</code>, the setup is just a little bit different to go discover all the commands held in the application:</p><p><a id="snippet-sample_MultipleCommands.Program.Main"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Main</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">executor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> CommandExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Find and apply all command classes discovered</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// in this assembly</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RegisterCommands</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Program</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">GetTypeInfo</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">Assembly</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Execute</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L10-L22" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_MultipleCommands.Program.Main" title="Start of snippet">anchor</a></sup></p><p>Now then, typing <code>dotnet run</code> without specifying a valid command will give you this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">The available commands are:</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  Alias      Description</span></span>
<span class="line"><span style="color:#A6ACCD;">────────────────────────────────────────────────────────────</span></span>
<span class="line"><span style="color:#A6ACCD;">  checkout   Switch branches or restore working tree files</span></span>
<span class="line"><span style="color:#A6ACCD;">  clean      Remove untracked files from the working tree</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Typing <code>dotnet run -- help</code> or <code>dotnet run -- ?</code> would give you the same information.</p><p>Our fake <code>clean</code> command has this usage:</p><p><a id="snippet-sample_CleanInput"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CleanInput</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Do it now!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ForceFlag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">FlagAlias</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Remove untracked directories in addition to untracked files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RemoveUntrackedDirectoriesFlag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">FlagAlias</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Description</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Remove only files ignored by Git</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DoNoUseStandardIgnoreRulesFlag</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L75-L89" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_CleanInput" title="Start of snippet">anchor</a></sup></p><p>To see the specific usage of the <code>clean</code> command, try <code>dotnet run -- help clean</code> or <code>dotnet run -- ? clean</code> to get the usage:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">clean - Remove untracked files from the working tree</span></span>
<span class="line"><span style="color:#A6ACCD;">└── Remove untracked files from the working tree</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── dotnet run -- clean</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── [-f, --force]</span></span>
<span class="line"><span style="color:#A6ACCD;">        ├── [-d, --remove-untracked-directories]</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── [-x, --do-no-use-standard-ignore-rules]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">                                    Usage   Description</span></span>
<span class="line"><span style="color:#A6ACCD;">─────────────────────────────────────────────────────────────────────────────────────────────────────────</span></span>
<span class="line"><span style="color:#A6ACCD;">                            [-f, --force]   Do it now!</span></span>
<span class="line"><span style="color:#A6ACCD;">     [-d, --remove-untracked-directories]   Remove untracked directories in addition to untracked files</span></span>
<span class="line"><span style="color:#A6ACCD;">  [-x, --do-no-use-standard-ignore-rules]   Remove only files ignored by Git</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,48),e=[p];function t(c,r,i,D,y,C){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
