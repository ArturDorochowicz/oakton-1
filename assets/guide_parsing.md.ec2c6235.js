import{_ as n,c as s,o as a,a as t}from"./app.e640da3b.js";const m='{"title":"Parsing Arguments and Optional Flags","description":"","frontmatter":{},"headers":[{"level":2,"title":"Arguments","slug":"arguments"},{"level":2,"title":"Valid Argument Types","slug":"valid-argument-types"},{"level":2,"title":"Array or Enumerable Arguments","slug":"array-or-enumerable-arguments"},{"level":2,"title":"Valid Argument Patterns","slug":"valid-argument-patterns"},{"level":2,"title":"Optional Flags","slug":"optional-flags"},{"level":2,"title":"Setting Flag Values","slug":"setting-flag-values"},{"level":2,"title":"Flag Alias","slug":"flag-alias"},{"level":2,"title":"Boolean Flags","slug":"boolean-flags"},{"level":2,"title":"Enumerable Flags","slug":"enumerable-flags"},{"level":2,"title":"Key/Value Flags","slug":"key-value-flags"}],"relativePath":"guide/parsing.md","lastUpdated":1676460857062}',e={},p=t(`<h1 id="parsing-arguments-and-optional-flags" tabindex="-1">Parsing Arguments and Optional Flags <a class="header-anchor" href="#parsing-arguments-and-optional-flags" aria-hidden="true">#</a></h1><h2 id="arguments" tabindex="-1">Arguments <a class="header-anchor" href="#arguments" aria-hidden="true">#</a></h2><p>An argument is any public field or settable property on the input class that is not suffixed with &quot;Flag&quot; or marked with the <code>[IgnoreOnCommandLine]</code>. Below is a sample:</p><p><a id="snippet-sample_sample_arguments"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameInput</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arguments can be settable properties</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> First <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// Arguments can be public fields</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Last<span class="token punctuation">;</span>

    <span class="token comment">// Read only properties are ignored</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Fullname <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">First</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Last</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
    
    <span class="token comment">// You can explicitly ignore public fields or </span>
    <span class="token comment">// properties that should not be captured at</span>
    <span class="token comment">// the command line</span>
    <span class="token punctuation">[</span>IgnoreOnCommandLine<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Nickname<span class="token punctuation">;</span>
    
    <span class="token comment">// This would be considered to be a flag,</span>
    <span class="token comment">// not an argument</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> VerboseFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/OaktonSample/Program.cs#L138-L160" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_sample_arguments" title="Start of snippet">anchor</a></sup></p><h2 id="valid-argument-types" tabindex="-1">Valid Argument Types <a class="header-anchor" href="#valid-argument-types" aria-hidden="true">#</a></h2><p>Argument values can be of type:</p><ul><li>String -- wrap a string with spaces in quotes like <code>&quot;Kareem Abdul Jabbar&quot;</code></li><li>Number -- but you&#39;ll need to wrap data in parantheses for negative numbers like <code>&quot;-1&quot;</code> so Oakton doesn&#39;t treat it like a flag</li><li>Enumeration</li><li>Guid</li><li>DateTime -- in <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener noreferrer">Iso8601</a> format, or it falls back to <code>DateTime.Parse()</code>. Relative dates can be expressed like <code>TODAY</code> or <code>TODAY-3</code> or <code>TODAY+3</code> for today, 3 days ago, and 3 days from now respectively</li><li>Any concrete type that has a constructor with a single string argument like <code>new Dimensions(&quot;2 x 4&quot;)</code></li><li>Arrays of any of the types above in comma delimited form, but you would have to wrap the logical array values in parentheses like <code>&quot;1,2,3,4&quot;</code></li><li>TimeSpan -- express as a time in 24 hour time like <code>1200</code> or <code>12:30</code>. See the <a href="https://github.com/JasperFx/baseline/blob/master/src/Baseline.Testing/Conversion/TimeSpanConverterTester.cs" target="_blank" rel="noopener noreferrer">unit tests for TimeSpan conversions</a> for more examples.</li></ul><p>The conversions are done via the <a href="https://github.com/JasperFx/baseline" target="_blank" rel="noopener noreferrer">Baseline</a> library.</p><h2 id="array-or-enumerable-arguments" tabindex="-1">Array or Enumerable Arguments <a class="header-anchor" href="#array-or-enumerable-arguments" aria-hidden="true">#</a></h2><p>You <em>can</em> use array or enumerable arguments as shown on this input type:</p><p><a id="snippet-sample_enumerablearguments"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumerableArgumentInput</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Names <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> OptionalFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TargetEnum<span class="token punctuation">&gt;</span></span> Enums <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ages of target&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> Ages <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/EnumerableArgumentTester.cs#L63-L76" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_enumerablearguments" title="Start of snippet">anchor</a></sup></p><p>There&#39;s one huge caveat though, <strong>an enumerable or array variable will need to be the very last argument</strong> in your command line usage.</p><p>The usage would be:</p><div class="language-"><pre><code>executable command value1 value2 value3 --flag --flag2
</code></pre></div><h2 id="valid-argument-patterns" tabindex="-1">Valid Argument Patterns <a class="header-anchor" href="#valid-argument-patterns" aria-hidden="true">#</a></h2><p>Look at the input class from the <a href="/guide/">getting started</a> tutorial:</p><p><a id="snippet-sample_nameinput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameInput</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;The name to be printed to the console output&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;The color of the text. Default is black&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleColor</span> Color <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Black<span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Optional title preceeding the name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TitleFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L19-L31" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nameinput" title="Start of snippet">anchor</a></sup></p><p>In this particular case, I want users to be able to enter either the <code>Name</code> argument or both the <code>Name</code> and <code>Color</code> arguments. In the matching command class for this input, I specify two <code>Usages</code> patterns for this command:</p><p><a id="snippet-sample_namecommand"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Print somebody&#39;s name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">OaktonCommand<span class="token punctuation">&lt;</span>NameInput<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">NameCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// The usage pattern definition here is completely</span>
        <span class="token comment">// optional</span>
        <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;Default Color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Usage</span><span class="token punctuation">(</span><span class="token string">&quot;Print name with specified color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">NameInput</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> text <span class="token operator">=</span> input<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>TitleFlag<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            text <span class="token operator">=</span> input<span class="token punctuation">.</span>TitleFlag <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        AnsiConsole<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;[</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input<span class="token punctuation">.</span>Color</span><span class="token punctuation">}</span></span><span class="token string">]</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">text</span><span class="token punctuation">}</span></span><span class="token string">[/]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Just telling the OS that the command</span>
        <span class="token comment">// finished up okay</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/quickstart/Program.cs#L33-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_namecommand" title="Start of snippet">anchor</a></sup></p><p>The call to <code>Usage</code> in the constructor function specifies the valid argument patterns for the command. If that explicit <code>Usage</code> configuration was omitted, Oakton assumes that every argument is always mandatory and appears in the order of the properties or fields in the input class.</p><h2 id="optional-flags" tabindex="-1">Optional Flags <a class="header-anchor" href="#optional-flags" aria-hidden="true">#</a></h2><p>Flags are any public settable property or public field on the input class that are suffixed with <em>Flag</em>. Below is an example of several flags:</p><p><a id="snippet-sample_cleaninput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanInput</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Do it now!&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ForceFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FlagAlias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string character">&#39;d&#39;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Remove untracked directories in addition to untracked files&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> RemoveUntrackedDirectoriesFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FlagAlias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string character">&#39;x&#39;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Remove only files ignored by Git&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> DoNoUseStandardIgnoreRulesFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L75-L89" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_cleaninput" title="Start of snippet">anchor</a></sup></p><h2 id="setting-flag-values" tabindex="-1">Setting Flag Values <a class="header-anchor" href="#setting-flag-values" aria-hidden="true">#</a></h2><p>Let&#39;s say you&#39;re trying to recreate the command line options for the <code>git checkout</code> command with this input:</p><p><a id="snippet-sample_checkoutinput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckoutInput</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FlagAlias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;create-branch&quot;</span><span class="token punctuation">,</span><span class="token string character">&#39;b&#39;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CreateBranchFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> DetachFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ForceFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L62-L72" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_checkoutinput" title="Start of snippet">anchor</a></sup></p><p>To specify the name of a newly created branch using the <code>CreateBranchFlag</code> property, I can either use:</p><div class="language-"><pre><code>git checkout -b working
</code></pre></div><p>to create a new &quot;working&quot; branch, or use the long form:</p><div class="language-"><pre><code>git checkout --create-branch working
</code></pre></div><p>When Oakton encounters a recognized flag that accepts a value, it assumes that the next string value should be converted to that named value and bound to the proper field or property.</p><h2 id="flag-alias" tabindex="-1">Flag Alias <a class="header-anchor" href="#flag-alias" aria-hidden="true">#</a></h2><p>Oakton follows the Unix idiom of command line flags being identified as either two dashes and a word for the long form, or by a single dash and a letter as a shorthand. By default, a flag in the command line is derived from the property or field name by omitting the <em>Flag</em> suffix for the long form and taking the first letter for the short hand.</p><p>By that logic, the property named <code>ForceFlag</code> from the example above would be used like this (assuming that the executable is named &#39;git&#39;):</p><div class="language-"><pre><code>git clean --force
</code></pre></div><p>or</p><div class="language-"><pre><code>git clean -f
</code></pre></div><p>There is some logic to deal with bigger property names by splitting based on <a href="http://wiki.c2.com/?PascalCase" target="_blank" rel="noopener noreferrer">Pascal casing rules</a>. So a property named <code>FirstNameFlag</code> would be parsed at the command line as either <code>-f</code> or <code>--first-name-flag</code>.</p><p>You can of course override the flag alias in either long or short form by using the <code>[FlagAlias]</code> attribute as shown in the <code>CleanInput</code> example above.</p><p>Lastly, if only the long form alias is desired, <code>[FlagAlias]</code> provides the constructor <code>FlagAliasAttribute(string longAlias, bool longAliasOnly)</code>.</p><p>Just like Arguments, Flags can be any type that Oakton knows how to convert, with a few special types shown in the subsequent sections.</p><h2 id="boolean-flags" tabindex="-1">Boolean Flags <a class="header-anchor" href="#boolean-flags" aria-hidden="true">#</a></h2><p>Boolean flags are just a little bit different because there&#39;s no value necessary. If the flag appears in the command line arguments, the field or property is set to <code>true</code>.</p><p>Consider our recreation of the <code>git clean</code> command:</p><p><a id="snippet-sample_cleaninput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanInput</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Do it now!&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ForceFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FlagAlias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string character">&#39;d&#39;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Remove untracked directories in addition to untracked files&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> RemoveUntrackedDirectoriesFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FlagAlias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string character">&#39;x&#39;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Remove only files ignored by Git&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> DoNoUseStandardIgnoreRulesFlag <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/MultipleCommands/Program.cs#L75-L89" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_cleaninput" title="Start of snippet">anchor</a></sup></p><p>From the command line, I can use these boolean flags like this with the long form for <code>ForceFlag</code>:</p><div class="language-"><pre><code>git clean -x -d --force 
</code></pre></div><p>or with all short names:</p><div class="language-"><pre><code>git clean -x -d --f
</code></pre></div><p>or using the Unix idiom of being able to combine flags in one expression like this (&quot;git clean -xfd&quot; is what I use myself):</p><div class="language-"><pre><code>git clean -xfd
</code></pre></div><p>All of the usages above are exact equivalents.</p><h2 id="enumerable-flags" tabindex="-1">Enumerable Flags <a class="header-anchor" href="#enumerable-flags" aria-hidden="true">#</a></h2><p>You can use enumerable types like <code>string[]</code> or <code>IEnumerable&lt;string&gt;</code> for flag arguments to add multiple values. Flags are a little more forgiving in this usage than arguments because Oakton can rely on the start of another flag to &quot;know&quot; when we&#39;ve finished collecting values for that array.</p><p>Let&#39;s say we have this input:</p><p><a id="snippet-sample_fileinput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInput</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> FilesFlag<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> DirectoriesFlag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/FlagTester.cs#L160-L167" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_fileinput" title="Start of snippet">anchor</a></sup></p><p>In usage, the flags could be used like:</p><div class="language-"><pre><code>executable command --files one.txt two.txt &quot;c:\\folder\\file.txt&quot; --directories c:\\folder1 c:\\folder2
</code></pre></div><h2 id="key-value-flags" tabindex="-1">Key/Value Flags <a class="header-anchor" href="#key-value-flags" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">warning</p><p>Key/Value flags have to be of type <code>Dictionary&lt;string, string&gt;</code> or <code>IDictionary&lt;string, string&gt;</code></p></div><p>New to Oakton 1.3 is the ability to <strong>finally</strong> express key/value pairs as a special kind of flag. Let&#39;s say that we want to capture extensible key/value pairs on our input class like this:</p><p><a id="snippet-sample_dictinput"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictInput</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> PropFlag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/oakton/blob/master/src/Tests/DictionaryFlagTester.cs#L45-L50" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_dictinput" title="Start of snippet">anchor</a></sup></p><p>In usage at the command line, the flag is used like this:</p><div class="language-"><pre><code>executable command --prop:color Red --prop:direction North
</code></pre></div><p>When this command line is parsed, the <code>PropFlag</code> property above will be a dictionary with the values <code>color=Red</code> and <code>direction=North</code>.</p>`,83),o=[p];function c(l,i,u,r,k,d){return a(),s("div",null,o)}var h=n(e,[["render",c]]);export{m as __pageData,h as default};
